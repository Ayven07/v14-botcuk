const setups = require("../schemas/setup")
const settings = require("../configs/settings.json")
const Discord = require('discord.js')
const Guild = require("../schemas/pGuild");
const User = require("../schemas/pUser")
let zaman = new Map();
let bzaman = new Map();
const ms = require('ms')
const penals = require("../schemas/penals");
const emojis = require('../configs/emojiName.json')
const messageUser = require("../schemas/messageUser");
const db = require("../schemas/vrcRoleCommands");
const voiceUser = require("../schemas/voiceUser");
const voiceUserParent = require("../schemas/voiceUserParent");
const nameData = require("../schemas/names")
const setup = require("../schemas/memberSetup")
const moment = require("moment");
const Users = require("../schemas/users.js");
const coin = require("../schemas/coin");
const client = global.client;
const inviterSchema = require("../schemas/inviter");
const Menu = require('../schemas/menus')
moment.locale("tr");
module.exports = async (interaction) => {
if(!interaction.guild) return;
const ayar = await setups.findOne({guildID: settings.guildID})
if(!ayar) return; 
const member = await interaction.guild.members.fetch(interaction.member.user.id)
if (!member) return;
if (interaction.customId === "renk") {
let color = new Map([
["siyah", ayar.blackRoles],
["mavi", ayar.blueRoles],
["beyaz", ayar.whiteRoles],
["kirmizi", ayar.redRoles],
["sari", ayar.yellowRoles], 
["pembe", ayar.pinkRoles],
["mor", ayar.purpleRoles],
["turuncu", ayar.orangeRoles],
["yesil", ayar.greenRoles],
["kahverengi", ayar.brownRoles],
["bordo", ayar.burgundyRoles],
["turkuaz", ayar.turquoiseRoles],
["bej", ayar.beigeRoles],
["lacivert", ayar.navyblueRoles],
["mavitwo", ayar.lightblueRoles],
["yesiltwo", ayar.pistachiogreenRoles],          
])
let role = color.get(interaction.values[0])
let renkroller = [ayar.blackRoles, ayar.blueRoles, ayar.whiteRoles, ayar.redRoles, ayar.yellowRoles, ayar.pinkRoles, ayar.purpleRoles, ayar.orangeRoles, ayar.greenRoles, ayar.brownRoles, ayar.burgundyRoles, ayar.turquoiseRoles, ayar.beigeRoles, ayar.navyblueRoles, ayar.lightblueRoles, ayar.pistachiogreenRoles]
if (!member.roles.cache.has(ayar.tagRoles) && !member.roles.cache.has(ayar.boosterRoles) && !member.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return interaction.reply({ content: "Rollerin gÃ¼ncellenirken bir sorun meydana geldi **(Ä°sminde Sunucu Tag'Ä± Yoktur veya Boost basmamÄ±ÅŸsÄ±n)**" , ephemeral: true })
if (interaction.values[0] === "rolsil") {
await member.roles.remove(renkroller)
} else {
if (!interaction.values.length) {
await member.roles.remove(renkroller).catch(err => {})
} else if (interaction.values.length > 1) {
await member.roles.add(role).catch(err => {})
} else {
await member.roles.remove(renkroller).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
} 
if (interaction.customId === "takim") {
let takimMap = new Map([
["fb", ayar.fbRoles],
["gs", ayar.gsRoles],
["bjk", ayar.bjkRoles],
["ts", ayar.tsRoles],
])
let roles = [ayar.fbRoles, ayar.gsRoles, ayar.bjkRoles, ayar.tsRoles]
const role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = takimMap.get(ids)
role.push(den)
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles)
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else if (interaction.values.length > 1) {
await member.roles.add(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
} 
if (interaction.customId === "etkinliks") {
let eventsMap = new Map([
["etkinlik", ayar.etkinlikRoles],
["cekilis", ayar.cekilisRoles],
])
let roles = [ayar.etkinlikRoles, ayar.cekilisRoles]
const role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = eventsMap.get(ids)
role.push(den);
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles)
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else if (interaction.values.length > 1) {
await member.roles.add(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
}
if (interaction.customId === "burc") {
let burÃ§Map = new Map([
["koÃ§", ayar.kocRoles],
["boÄŸa", ayar.bogaRoles],
["ikizler", ayar.ikizlerRoles],
["yengeÃ§", ayar.yengecRoles],
["aslan", ayar.aslanRoles],
["baÅŸak", ayar.basakRoles],
["terazi", ayar.teraziRoles],
["akrep", ayar.akrepRoles],
["yay", ayar.yayRoles],
["oÄŸlak", ayar.oglakRoles],
["kova", ayar.kovaRoles],
["balÄ±k", ayar.balikRoles],
])
let roles = [ayar.akrepRoles, ayar.yengecRoles, ayar.ikizlerRoles, ayar.yayRoles, ayar.aslanRoles, ayar.teraziRoles, ayar.basakRoles, ayar.kovaRoles, ayar.balikRoles, ayar.oglakRoles, ayar.bogaRoles, ayar.kocRoles]
const role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = burÃ§Map.get(ids)
role.push(den)
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles)
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else if (interaction.values.length > 1) {
await member.roles.add(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
} 
if (interaction.customId === "iliski") {
let LoveMap = new Map([
["couple", ayar.coupleRoles],
["alone", ayar.aloneRoles],
["sy", ayar.syRoles],
])
let roles = [ayar.coupleRoles, ayar.aloneRoles, ayar.syRoles]
const role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = LoveMap.get(ids)
role.push(den)
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles)
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else if (interaction.values.length > 1) {
await member.roles.add(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
} 
if (interaction.customId === "games") {
let GameMap = new Map([
["csgo", ayar.csRoles],
["lol", ayar.lolRoles],
["valorant", ayar.valorantRoles],
["gta5", ayar.gtavRoles],
["pubg", ayar.pubgRoles],
["fortnite", ayar.fortniteRoles],
["minecraft", ayar.minecraftRoles],
["mobilelegends", ayar.mlbbRoles],
["amongus", ayar.amongusRoles],
])
let roles = [ayar.amongusRoles, ayar.pubgRoles, ayar.csRoles, ayar.fortniteRoles, ayar.gtavRoles, ayar.valorantRoles, ayar.lolRoles, ayar.mlbbRoles, ayar.minecraftRoles]
const role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = GameMap.get(ids)
role.push(den)
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles)
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else if (interaction.values.length > 3) {
await member.roles.add(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz dÃ¼zenlendi.", ephemeral: true }).catch(e => {})
} 
const modal = new Discord.ModalBuilder()
.setCustomId('sbasvuru')
.setTitle('SorunlarÄ± Ä°let')
const s = new Discord.TextInputBuilder()
.setCustomId('soruns')
.setLabel('Sorunu AnlatÄ±r MÄ±sÄ±nÄ±z ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Ã–rn: KayÄ±t ederken bir hata oluÅŸtu ve kayÄ±t edemiyorum.');
const sx = new Discord.ActionRowBuilder().addComponents(s);
modal.addComponents(sx);
if(interaction.isButton()) {
if(interaction.customId === "bsorun") {
interaction.showModal(modal, {
client: client, 
interaction: interaction, 
})
}
}
if (interaction.customId === 'sbasvuru') {
const cevap = interaction.fields.getTextInputValue('soruns');
await interaction.reply({content: `Sorun'un BaÅŸarÄ±yla Ä°letildi!`, ephemeral: true }).catch(() => {});
const roles = member.roles.cache.filter(role => role.id !== settings.guildID).sort((a, b) => b.position - a.position).map(role => `<@&${role.id}>`);
const rolleri = []
if (roles.length > 6) {
const lent = roles.length - 6
let itemler = roles.slice(0, 6)
itemler.map(x => rolleri.push(x))
rolleri.push(`${lent} daha.`)
} else {
roles.map(x => rolleri.push(x))
}
const embed = new Discord.EmbedBuilder()
const channel = await client.kanalBul("sikayet-log");
if(channel) channel.send({embeds: [embed
.setTitle("ðŸŽ‰ Yeni Sorun BaÅŸvuru ðŸŽ‰")
.setDescription(`
${member.guild.emojiGÃ¶ster(emojis.uyari)} **__KullanÄ±cÄ± HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **ID: \`${member.id}\`**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **KullanÄ±cÄ±: ${member} (\`${member.user.globalName ? member.user.globalName : member.user.tag}\`)**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Rolleri: ${rolleri.join(", ")}**

${member.guild.emojiGÃ¶ster(emojis.uyari)} **__Sorun HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Sorunu: ${cevap}**
`).setFooter({iconURL: member.avatarURL({dynamic: true}), text: `KullanÄ±cÄ± ${member.user.gobalName ? member.user.globalName : member.user.tag}`})]})            
}
const modals = new Discord.ModalBuilder()
.setCustomId('Ã¶basvuru')
.setTitle('Ä°stek & Ã–neri Formu')
const ss = new Discord.TextInputBuilder()
.setCustomId('Ã¶neris')
.setLabel('Ä°stek Veya Ã–neriniz Nedir ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Ä°steÄŸinizi Ve Ã–nerinizi Bize Ä°letin.');
const sxx = new Discord.ActionRowBuilder().addComponents(ss);
modals.addComponents(sxx);
if(interaction.isButton()) {
if(interaction.customId === "bÃ¶neri") {
interaction.showModal(modals, {
client: client, 
interaction: interaction, 
})
}
}
if (interaction.customId === 'Ã¶basvuru') {
const cevap = interaction.fields.getTextInputValue('Ã¶neris');
await interaction.reply({content: `Ã–nerin BaÅŸarÄ±yla Ä°letildi!`, ephemeral: true }).catch(() => {});
const roles = member.roles.cache.filter(role => role.id !== settings.guildID).sort((a, b) => b.position - a.position).map(role => `<@&${role.id}>`);
const rolleri = []
if (roles.length > 6) {
const lent = roles.length - 6
let itemler = roles.slice(0, 6)
itemler.map(x => rolleri.push(x))
rolleri.push(`${lent} daha.`)
} else {
roles.map(x => rolleri.push(x))
}
const embed = new Discord.EmbedBuilder()
const channel = await client.kanalBul("Ã¶neri-log");
if(channel) channel.send({embeds: [embed
.setTitle("ðŸŽ‰ Yeni Ä°stek & Ã–neri BaÅŸvuru ðŸŽ‰")
.setDescription(`
${member.guild.emojiGÃ¶ster(emojis.uyari)} **__KullanÄ±cÄ± HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **ID: \`${member.id}\`**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **KullanÄ±cÄ±: ${member} (\`${member.user.globalName ? member.user.globalName : member.user.tag}\`)**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Rolleri: ${rolleri.join(", ")}**

${member.guild.emojiGÃ¶ster(emojis.uyari)} **__Ä°stek & Ã–neri HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Ä°stek & Ã–nerisi: ${cevap}**
`).setFooter({iconURL: member.avatarURL({dynamic: true}), text: `KullanÄ±cÄ± ${member.user.gobalName ? member.user.globalName : member.user.tag}`})]})              
}
const modalss = new Discord.ModalBuilder()
.setCustomId('ybasvuru')
.setTitle('Yetkili BaÅŸvuru')
const sss = new Discord.TextInputBuilder()
.setCustomId('isim')
.setLabel('Ä°sminiz Ve YaÅŸÄ±nÄ±z ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Buraya Ä°sminizi Ve YaÅŸÄ±nÄ±zÄ± YazÄ±nÄ±z!');
const ssss = new Discord.TextInputBuilder()
.setCustomId('nedens')
.setLabel('Sunucumuz Ä°Ã§in Neler Yapabilirsiniz ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Buraya Nedeninizi YazÄ±nÄ±z!');	
const sssss = new Discord.TextInputBuilder()
.setCustomId('aktifligi')
.setLabel('Sunucumuzda GÃ¼nlÃ¼k AktifliÄŸiniz ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Buraya AktifliÄŸinizi YazÄ±nÄ±z!');
const ssssss = new Discord.TextInputBuilder()
.setCustomId('bilgi')
.setLabel('Kendiniz HakkÄ±nda Biraz Bilgi ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Buraya Kendiniz HakkÄ±nda Bilgi YazÄ±nÄ±z!'); 
const sxxx = new Discord.ActionRowBuilder().addComponents(sss);
const sxxxx = new Discord.ActionRowBuilder().addComponents(ssss);
const sxxxxx = new Discord.ActionRowBuilder().addComponents(sssss);
const sxxxxxx = new Discord.ActionRowBuilder().addComponents(ssssss);
modalss.addComponents(sxxx, sxxxx, sxxxxx, sxxxxxx);
if(interaction.isButton()) {
if(interaction.customId === "basvuru") {
if(ayar.tagSystem == true && !ayar.serverTag.some((s) => member.user.globalName && member.user.globalName.includes(s))) 
{  
interaction.reply({content: `kullanÄ±cÄ± adÄ±nda tagÄ±mÄ±z (\`${ayar.serverTag.join(" - ")}\`) olmadÄ±ÄŸÄ± iÃ§in baÅŸvuru yapamazsÄ±nÄ±z.`, ephemeral: true }).catch(() => {});
return }
if (bzaman.get(member.id) >= 1) return interaction.reply({content: "<@"+member+"> Bu komutu 1 saat'de bir kullanabilirsin.", ephemeral: true}).catch(() => {});
if(ayar.staffRoles.some(x => member.roles.cache.has(x)) && ayar.registerRoles.some(oku => member.roles.cache.has(oku)) && ayar.ownerRoles.some(oku => member.roles.cache.has(oku)) && member.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) 
{	
interaction.reply({content: `Zaten Sunucumuzda Yetkilisiniz.`, ephemeral: true})  
return } 	
interaction.showModal(modalss, {
client: client, 
interaction: interaction, 
})
}
}
if (interaction.customId === 'ybasvuru') {
const row = new Discord.ActionRowBuilder()
.addComponents(
new Discord.ButtonBuilder()
.setCustomId("onayla")
.setEmoji(interaction.guild.emojiGÃ¶ster(emojis.yes).id)
.setLabel("Onayla")
.setStyle(Discord.ButtonStyle.Success),
new Discord.ButtonBuilder()
.setCustomId("reddet")
.setLabel("Reddet")
.setEmoji(interaction.guild.emojiGÃ¶ster(emojis.no).id)
.setStyle(Discord.ButtonStyle.Danger),
);
const nedeni = interaction.fields.getTextInputValue('nedens');
const aktiflik = interaction.fields.getTextInputValue('aktifligi');   
const ismi = interaction.fields.getTextInputValue('isim');
const bilgisi = interaction.fields.getTextInputValue('bilgi');     
await interaction.reply({content: ` Yetkili BaÅŸvurun BaÅŸarÄ±yla Ä°letildi!`, ephemeral: true }).catch(() => {});
bzaman.set(member.id, (bzaman.get(member.id) || 1));
setTimeout(() => {
bzaman.delete(member.id)
}, 1000 * 60 * 60 * 1)
const roles = member.roles.cache.filter(role => role.id !== settings.guildID).sort((a, b) => b.position - a.position).map(role => `<@&${role.id}>`);
const rolleri = []
if (roles.length > 6) {
const lent = roles.length - 6
let itemler = roles.slice(0, 6)
itemler.map(x => rolleri.push(x))
rolleri.push(`${lent} daha.`)
} else {
roles.map(x => rolleri.push(x))
}
const messageData = await messageUser.findOne({ guildID: settings.guildID, userID: member.id });
const voiceData = await voiceUser.findOne({ guildID: settings.guildID, userID: member.id });    
const embed = new Discord.EmbedBuilder()
const channel = await client.kanalBul("basvuru-log");
if(channel) channel.send({content: `${ayar.roleAddRoles.map((x) => `<@&${x}>`).join(', ')} Ä°lgilenmeniz Gereken BaÅŸvuru Var!`, embeds: [embed
.setTitle("ðŸŽ‰ Yeni Yetkili BaÅŸvuru ðŸŽ‰")
.setDescription(`
${member.guild.emojiGÃ¶ster(emojis.uyari)} **__KullanÄ±cÄ± HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **ID: \`${member.id}\`**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **KullanÄ±cÄ±: ${member} (\`${member.user.globalName ? member.user.globalName : member.user.tag}\`)**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Rolleri: ${rolleri.join(", ")}**

${member.guild.emojiGÃ¶ster(emojis.uyari)} **__BaÅŸvuru HakkÄ±nda__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Ä°smi Ve YaÅŸÄ±: ${ismi}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Sunucumuz iÃ§in neler yapabilir: ${nedeni}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Sunucumuzda gÃ¼nlÃ¼k aktifliÄŸi: ${aktiflik}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Kendisi hakkÄ±nda biraz bilgi: ${bilgisi}**

${member.guild.emojiGÃ¶ster(emojis.uyari)} **__KullanÄ±cÄ± Stat Bilgileri__**
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Toplam Ses:** \`${moment.duration(voiceData ? voiceData.topStat : 0).format("H [saat], m [dakika]")}\`
${member.guild.emojiGÃ¶ster(emojis.nokta)} **Toplam Mesaj:** \`${messageData ? messageData.topStat : 0} mesaj\`

${member.guild.emojiGÃ¶ster(emojis.uyari)} **Not: BaÅŸvuruyu Onaylamak/Reddetmek Ä°Ã§in ButtonlarÄ± KullanÄ±nÄ±z!**
`).setFooter({iconURL: member.avatarURL({dynamic: true}), text: `KullanÄ±cÄ± ${member.user.gobalName ? member.user.globalName : member.user.tag}`})], components: [row]}).then(async function(mesaj){

mesaj.createMessageComponentCollector(user => user.clicker.user.id == member.id).on(`collect`, async(button) => {
if(button.customId === "onayla") {
if (!ayar.roleAddRoles.some(x => button.member.roles.cache.has(x)) && !button.member.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return;
button.deferUpdate()
row.components[0].setDisabled(true) 
row.components[1].setDisabled(true) 
mesaj.edit({ components: [row] }); 
const Sembed = new Discord.EmbedBuilder()
const channel = await client.kanalBul("basvuru-log");
channel.send({embeds: [Sembed.setDescription(`${member.guild.emojiGÃ¶ster(emojis.yes)} BaÅŸarÄ±yla ${member} KullanÄ±cÄ±sÄ±nÄ±n BaÅŸvurusu ${button.member} TarafÄ±ndan OnaylandÄ±!`)]})
member.send(`${interaction.guild.name} Sunucusundaki Yetkili BaÅŸvurun **${button.member.user.tag}** TarafÄ±ndan BaÅŸarÄ±yla OnaylandÄ±!:tada::tada::tada:`).catch(err => channel.send({content: `>>> ${member} kullanÄ±cÄ±sÄ±nÄ±n Ã¶zel mesajlarÄ± kapalÄ±. DM Ã¼zerinden bilgilendirme mesajÄ± gÃ¶nderemedim, lÃ¼tfen kendiniz bilgilendirme yapÄ±nÄ±z.` }))
member.roles.add(ayar.staffStartRoles).catch(e => {});
if(settings.coinSystem === true && !client.ranks.some((x) => interaction.member.roles.cache.has(x.role))) {
await coin.findOneAndUpdate({ guildID: settings.guildID, userID: interaction.member.id }, { $inc: { coin: settings.yetkiCoin } }, { upsert: true });       
interaction.member.gÃ¶revGÃ¼ncelle(settings.guildID, "yetkili", 1, message.channel);
await coin.findOneAndUpdate({ guildID: settings.guildID, userID: member.id }, { $inc: { coin: 2 } }, { upsert: true });       
} else if(interaction.member.permissions.has(8n)) {
await coin.findOneAndUpdate({ guildID: settings.guildID, userID: member.id }, { $inc: { coin: 2 } }, { upsert: true });       
}
await Users.updateOne({ _id: member.id }, { $set: { "Staff": true, "StaffGiveAdmin": interaction.member.id, Date: Date.now() } }, { upsert: true }).exec();
await Users.updateOne({ _id: interaction.member.id }, { $push: { "Staffs": { id: member.id, Date: Date.now() } } }, { upsert: true }).exec();
}
if(button.customId === "reddet") {  
if (!ayar.roleAddRoles.some(x => button.member.roles.cache.has(x)) && !button.member.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return;
button.deferUpdate()
row.components[0].setDisabled(true) 
row.components[1].setDisabled(true) 
mesaj.edit({ components: [row] });    
const Embed = new Discord.EmbedBuilder()
const channel = await client.kanalBul("basvuru-log");
if(channel) channel.send({embeds: [Embed.setDescription(`${member.guild.emojiGÃ¶ster(emojis.yes)} BaÅŸarÄ±yla ${member} KullanÄ±cÄ±sÄ±nÄ±n BaÅŸvurusu ${button.member} TarafÄ±ndan Reddedildi!`)]})
member.send(`${interaction.guild.name} Sunucusundaki Yetkili BaÅŸvurun **${button.member.user.tag}** TarafÄ±ndan Reddedildi! ðŸ˜”`).catch(err => channel.send({content: `>>> ${member} kullanÄ±cÄ±sÄ±nÄ±n Ã¶zel mesajlarÄ± kapalÄ±. DM Ã¼zerinden bilgilendirme mesajÄ± gÃ¶nderemedim, lÃ¼tfen kendiniz bilgilendirme yapÄ±nÄ±z.` }))
}
})})             
}

if(interaction.isButton()) {
const category = async (parentsArray) => {
const data = await voiceUserParent.find({ guildID: settings.guildID, userID: interaction.member.id });
const voiceUserParentData = data.filter((x) => parentsArray.includes(x.parentID));
let voiceStat = 0;
for (var i = 0; i <= voiceUserParentData.length; i++) {
voiceStat += voiceUserParentData[i] ? voiceUserParentData[i].parentData : 0;
}
return moment.duration(voiceStat).format("H [saat], m [dakika] s [saniye]");
};
if(interaction.customId === "katilma") {
interaction.reply({content: `Sunucuya KatÄ±lma Tarihiniz: <t:${Math.floor(interaction.member.joinedTimestamp / 1000)}:R>â€Š`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "rol") {
interaction.reply({content: `Ãœzerinde Bulunan Rollerin Listesi : ${interaction.member.roles.cache.filter(xd => xd.name !== "@everyone").map(x => x).join("\n")}`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "acilis") {
interaction.reply({content: `HesabÄ±nÄ±zÄ±n AÃ§Ä±lÄ±ÅŸ Tarihi: <t:${Math.floor(interaction.member.user.createdTimestamp / 1000)}>â€Š`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "invite2") {
const inviterData = await inviterSchema.findOne({ guildID: settings.guildID, userID: interaction.member.id });
const total = inviterData ? inviterData.total : 0;
const regular = inviterData ? inviterData.regular : 0;
const bonus = inviterData ? inviterData.bonus : 0;
const leave = inviterData ? inviterData.leave : 0;
const fake = inviterData ? inviterData.fake : 0;
interaction.reply({content: `${interaction.member.toString()}, Ã¼yesinin <t:${Math.floor(Date.now() / 1000)}>â€Š tarihinden itibaren **${interaction.guild.name}** sunucusunda toplam invite bilgileri aÅŸaÄŸÄ±da belirtilmiÅŸtir.
${member.guild.emojiGÃ¶ster(emojis.stat)} Toplam **${inviterData ? inviterData.regular : 0}** davet.
${member.guild.emojiGÃ¶ster(emojis.nokta)} **(${inviterData ? inviterData.bonus : 0} bonus, ${inviterData ? inviterData.leave : 0} ayrÄ±lmÄ±ÅŸ, ${inviterData ? inviterData.fake : 0} fake)\**
`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "kayit") {
if(interaction.member.roles.cache.get(ayar.boosterRoles)) return;     
await interaction.member.roles.set(ayar.unregRoles).catch(e => {})
interaction.reply({content: `${interaction.member.toString()} Ã¼yesi baÅŸarÄ±yla kayÄ±tsÄ±za atÄ±ldÄ±!`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "sunucu") {
const moment = require("moment");
moment.locale("tr");
let data = await penals.find({ guildID: settings.guildID, userID: interaction.member.id, }).sort({ date: -1 });
if (data.length === 0) return interaction.reply({ content:`${interaction.guild.emojis.cache.find(x => x.name == emojis.yes)} ${member.toString()} sicilin temiz!`, ephemeral: true})
data = data.map((x) => `#${x.id} ${x.active ? `${interaction.guild.emojis.cache.find(x => x.name == emojis.yes)}` : `${interaction.guild.emojis.cache.find(x => x.name == emojis.no)}`} **[${x.type}]** ${moment(x.date).format("LLL")} tarihinde <@${x.staff}> tarafÄ±ndan **${x.reason}** nedeniyle ${x.type.replace("-", " ")} cezasÄ± almÄ±ÅŸsÄ±n.\n`).join("\n");
for (var i = 0; i < Math.floor(data.length / 2000); i++) {
interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(data.slice(0, 2000))], ephemeral: true});
data = data.slice(2000);
}
if (data.length > 0) interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(data)], ephemeral: true}).catch(() => {});
}
if(interaction.customId === "isim") {
const data = await nameData.findOne({ guildID: settings.guildID, userID: interaction.member.id });
const ambed = new Discord.EmbedBuilder()
.setThumbnail(interaction.member.user.avatarURL({ dynamic: true, size: 2048 }))
.setTitle(`${interaction.member.user.globalName ? interaction.member.user.globalName : interaction.member.user.tag} Ã¼yesinin isim bilgileri:`)
.setDescription(`${member.guild.emojiGÃ¶ster(emojis.no)} KiÅŸinin toplamda **${data ? `${data.names.length}` : "0"}** isim kayÄ±tÄ± bulundu.\n\n${data ? data.names.splice(0, 5).map((x, i) => `\`${i + 1}.\` \`${x.name}\` (${x.rol}) (<@${x.yetkili}>) [ <t:${Math.floor(x.date / 1000)}:R> ]`).join("\n") : `Veri BulunamadÄ±.`}    `)      
interaction.reply({embeds: [ambed], ephemeral: true }).catch(() => {});
}
if(interaction.customId === "mesaj5") {
const messageData = await messageUser.findOne({ guildID: settings.guildID, userID: interaction.member.id });
const messageWeekly = messageData ? messageData.weeklyStat : 0;
const messageDaily = messageData ? messageData.dailyStat : 0;
interaction.reply({content: `
${member.guild.emojiGÃ¶ster(emojis.uyari)} ${interaction.member.toString()}, Ã¼yesinin <t:${Math.floor(Date.now() / 1000)}>â€Š tarihinden itibaren **${interaction.guild.name}** sunucusunda toplam mesaj bilgileri aÅŸaÄŸÄ±da belirtilmiÅŸtir.
${member.guild.emojiGÃ¶ster(emojis.stat)} **Mesaj Ä°statistiÄŸi**
${member.guild.emojiGÃ¶ster(emojis.nokta)} Toplam: **${messageData ? messageData.topStat : 0}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} HaftalÄ±k Mesaj: **${Number(messageWeekly).toLocaleString()} mesaj**
${member.guild.emojiGÃ¶ster(emojis.nokta)} GÃ¼nlÃ¼k Mesaj: **${Number(messageDaily).toLocaleString()} mesaj**`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "ses5") {
const voiceData = await voiceUser.findOne({ guildID: settings.guildID, userID: interaction.member.id });
const voiceWeekly = moment.duration(voiceData ? voiceData.weeklyStat : 0).format("H [saat], m [dakika]");
const voiceDaily = moment.duration(voiceData ? voiceData.dailyStat : 0).format("H [saat], m [dakika]");
interaction.reply({content: `
${member.guild.emojiGÃ¶ster(emojis.uyari)} ${interaction.member.toString()}, Ã¼yesinin <t:${Math.floor(Date.now() / 1000)}>â€Š tarihinden itibaren **${interaction.guild.name}** sunucusunda toplam ses bilgileri aÅŸaÄŸÄ±da belirtilmiÅŸtir.
${member.guild.emojiGÃ¶ster(emojis.stat)} **Sesli Sohbet Ä°statistiÄŸi**
${member.guild.emojiGÃ¶ster(emojis.nokta)} Toplam: **${moment.duration(voiceData ? voiceData.topStat : 0).format("H [saat], m [dakika] s [saniye]")}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} HaftalÄ±k Ses: **${voiceWeekly}**
${member.guild.emojiGÃ¶ster(emojis.nokta)} GÃ¼nlÃ¼k Ses: **${voiceDaily}**`, ephemeral: true }).catch(() => {});
}
}
if(interaction.isButton()) {
if(interaction.customId === "kurallar") {
const embed = new Discord.EmbedBuilder().setColor("#2f3136")
interaction.reply({embeds: [embed.addFields(
{name: `\`Kural 1\` **DM KuralÄ±**`,
value: `Sunucu iÃ§erisinde yaÅŸanan bir tartÄ±ÅŸmayÄ± Ã¶zel mesajlara (DM) taÅŸÄ±mak yasaktÄ±r. TaÅŸÄ±nmasÄ± durumunda sunucu yetkilileri duruma mÃ¼dahale edebilir.`, inline: true },  
{name: `\`Kural 2\` **Tehdit KuralÄ±**`,
value: `Bir kullanÄ±cÄ±yÄ± herhangi bir ÅŸekilde (Ã¶zel mesajlar/sunucu iÃ§i) tehdit etmeniz durumunda sunucumuzdan kalÄ±cÄ± olarak uzaklaÅŸtÄ±rÄ±lÄ±rsÄ±nÄ±z.`, inline: true },
{name: `\`Kural 3\` **KÃ¼fÃ¼r & Hakaret KuralÄ±**`,
value: `Sesli ve yazÄ±lÄ± sohbet kanallarÄ± iÃ§erisinde herhangi bir ÅŸekilde kÃ¼fÃ¼r veya hakaret edici bir sÃ¶z kullanmak yasaktÄ±r.\n\nÄ°sminizde kÃ¼fÃ¼r, hakaret veya topluluÄŸu kÄ±ÅŸkÄ±rtacak (herhangi bir ÅŸahsÄ± rencide edici) ibare bulunmasÄ± yasaktÄ±r.`, inline: true },
{name: `\`Kural 4\` **Dil KuralÄ±**`,
value: `Sunucu ana dili TÃ¼rkÃ§e olduÄŸu iÃ§in sunucu iÃ§erisinde TÃ¼rkÃ§e dÄ±ÅŸÄ±ndaki dilleri kullanmak yasaktÄ±r.`, inline: true },
{name: `\`Kural 5\` **Profil KuralÄ±**`,
value: `TopluluÄŸu koruma amacÄ±yla profil fotoÄŸrafÄ±nÄ±zda cinsellik, kan, vahÅŸet vb. rahatsÄ±z edici iÃ§erik bulundurmanÄ±z yasaktÄ±r.
**Profilinizde discord linki yasaktÄ±r.**`, inline: true },
{name: `\`Kural 6\` **Etiket KuralÄ±**`,
value: `Herhangi bir kullanÄ±cÄ±yÄ± rahatsÄ±z etme amacÄ± ile birÃ§ok kez etiketlemek, @Man ve @Woman rolÃ¼ndeki kiÅŸileri etiketlemek yasaktÄ±r.`, inline: true },
{name: `\`Kural 7\` **Sohbet KurallarÄ±**`,
value: `KiÅŸisel olmadÄ±ÄŸÄ±, cinsel unsur iÃ§ermediÄŸi, nefret sÃ¶ylemi bulundurmadÄ±ÄŸÄ± ve abartÄ±lmadÄ±ÄŸÄ± sÃ¼rece argo sÃ¶ylemler serbesttir.\n\nKiÅŸisel promosyon, kanal Ã¼zerinde herhangi bir reklam, kiÅŸisel bilgilerin paylaÅŸÄ±mÄ±, ifÅŸalama, tehdit, ÅŸantaj vb. yasaktÄ±r.\n\nSohbet kanalarÄ± iÃ§erisinde Flood, Spam ve Caps-lock kullanÄ±mÄ±, dini ve siyasi mizah yasaktÄ±r.\n\nBir kiÅŸiyi rencide edici bilgi, fotoÄŸraf vb. paylaÅŸÄ±mÄ± yasaktÄ±r.\n\nDil, din, Ä±rk, cinsiyet vb. ayrÄ±mcÄ±lÄ±klar yasaktÄ±r.`, inline: true })], ephemeral: true}).catch(() => {});                         
}
if(interaction.customId === "booster") {
const embed = new Discord.EmbedBuilder().setColor("#2f3136")
interaction.reply({embeds: [embed.setDescription(`Bir sunucuya takviye yapmak o sunucuya ekstra Ã¶zellikler saÄŸlÄ±yorsa kullanÄ±cÄ±lar neden bu Ã¶zelliklerden faydalanmasÄ±n? \n\nÄ°ÅŸte takviye yaparak elde edeceÄŸiniz avantajlar:`).addFields(
{name:`\`1\``,
value: `Ãœye listesinde herkesten ayrÄ± gÃ¶rÃ¼nen eÅŸsiz ve harika bir <@&${ayar.boosterRoles}> rolÃ¼.`, inline: true },
{name:`\`2\``,
value: `KullanÄ±cÄ± isminizi deÄŸiÅŸtirebileceÄŸiniz \`.b\` komutuna eriÅŸim.`, inline: true },
{name:`\`3\``,
value: `Sohbet kanallarÄ±nda harici emojileri kullanabilme hakkÄ±.`, inline: true },
{name:`\`4\``,
value: `Sunucu iÃ§erisine 2 adet emoji ekleyebilme hakkÄ±.`, inline: true },
{name:`\`5\``,
value: `Sunucu iÃ§erisindeki kullanÄ±cÄ± adÄ± renginizi deÄŸiÅŸtirebilme Ã¶zelliÄŸi. #rol-al`, inline: true }       )], ephemeral: true}).catch(() => {});
}
if(interaction.customId === "tag") {
const embed = new Discord.EmbedBuilder().setColor("#2f3136")
interaction.reply({embeds: [embed.setDescription(`Sunucumuzun tagÄ± olan \`${ayar.serverTag}\` sembolÃ¼nÃ¼ kullanÄ±cÄ± adÄ±nÄ±za ekleyerek tagÄ±mÄ±zÄ± alabilir ve harika avantajlara sahip olabilirsiniz.\n\nÄ°ÅŸte tag alarak elde edeceÄŸiniz avantajlar:`).addFields(
{name:`\`1\``,
value: `Ãœye listesinde herkesten ayrÄ± gÃ¶rÃ¼nen eÅŸsiz ve harika bir <@&${ayar.tagRoles}> rolÃ¼.`, inline: true },
{name:`\`2\``,
value: `Sunucu iÃ§erisindeki kullanÄ±cÄ± adÄ± renginizi deÄŸiÅŸtirebilme Ã¶zelliÄŸi.`, inline: true },
{name:`\`3\``,
value: `Sunucu iÃ§erisinde yetkili baÅŸvurusu yapabilme hakkÄ±.`, inline: true },
{name:`\`4\``,
value: `Sunucu iÃ§erisine 1 adet emoji ekleyebilme hakkÄ±.`, inline: true },
{name:`\`5\``,
value: `TaglÄ±lara Ã¶zel Ã§ekiliÅŸlere katÄ±labilme hakkÄ±.`, inline: true }       )], ephemeral: true}).catch(() => {});
}
if(interaction.customId === "reklam") {
const embed = new Discord.EmbedBuilder().setColor("#2f3136")
interaction.reply({embeds: [embed.setDescription(`
Bir sunucuya reklam verdirmek o sunucuya ekstra Ã¶zellikler saÄŸlÄ±yorsa kullanÄ±cÄ±lar neden bu Ã¶zelliklerden faydalanmasÄ±n?\n\nÄ°ÅŸte reklam satÄ±n alarak kazanacaÄŸÄ±nÄ±z avantajlar:`).addFields(
{name:`\`1\``,
value: `Ã‡ekiliÅŸ kanalÄ±nda 5 gÃ¼nlÃ¼k bir Ã§ekiliÅŸ. (KatÄ±lÄ±m zorunluluÄŸu!)`, inline: true },
{name:`\`2\``,
value: `Herkese aÃ§Ä±k bir kanalda reklam & Yeni gelenlere etiket!`, inline: true },
{name:`\`3\``,
value: `Herkese aÃ§Ä±k bir kanalda reklam.`, inline: true },
{name:`\`4\``,
value: `TÃ¼m kullanÄ±cÄ±lara tek seferde DM Ã¼zerinden reklam.`, inline: true },
{name:`\`5\``,
value: `Sadece kullanÄ±cÄ±larÄ±n gÃ¶rdÃ¼ÄŸÃ¼ duyurular kanalÄ±nda reklam.`, inline: true })], ephemeral: true}).catch(() => {});
}  
}
if(interaction.isStringSelectMenu()) {
if(interaction.values[0] === "kullanicik") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "kullanici").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "eglencek") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "eglence").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "ozelkk") {   
let res = await db.find({})      
interaction.reply({content: `${res.length > 0 ? res.map(x => `${settings.prefix}${x.cmdName} @Rainha/ID`).join("\n") : "Ã–zel Komut Bulunmamakta."}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "cezalandirmak") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "cezalandirma").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "yetkilik") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "yetkili").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "ustyetkilik") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "ustyetkili").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
if(interaction.values[0] === "ownerk") {         
interaction.reply({content: `${client.commands.filter((x) => x.conf.help && x.conf.category == "owner").sort((a, b) => b.conf.help - a.conf.help).map((x) => `${settings.prefix}${x.conf.help}`).splice(0, 300).join("\n")}`, ephemeral: true}).catch(e => {})           
}
}
if(interaction.customId === "yardimss") {   
    const row = new Discord.ActionRowBuilder()
    .addComponents(
        new Discord.StringSelectMenuBuilder()
        .setCustomId('helps')
        .setPlaceholder('Bot komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z!')
        .addOptions([
            {
                label: "KullanÄ±cÄ±",
                description: 'KullanÄ±cÄ± komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'kullanicik',
                emoji: '1139834661493805126',
            },
          {
                label: 'EÄŸlence',
                description: 'EÄŸlence komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'eglencek',
                emoji: '1139834661493805126',
            },
          {
                label: 'Ã–zel Komutlar',
                description: 'Ã–zel KomutlarÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'ozelkk',
                emoji: '1139834661493805126',
            },
          {
                label: 'CezalandÄ±rma',
                description: 'CezalandÄ±rma komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'cezalandirmak',
                emoji: '1139834661493805126',
            },
          {
                label: 'Yetkili',
                description: 'Yetkiki komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'yetkilik',
                emoji: '1139834661493805126',
            },
          {
                label: 'Ãœst Yetkili',
                description: 'Ãœst Yetkili komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'ustyetkilik',
                emoji: '1139834661493805126',
            },
          {
                label: 'Owner',
                description: 'Owner komutlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±nÄ±z.',
                value: 'ownerk',
                emoji: '1139834661493805126',
            },
        ]),
    );    
interaction.reply({ content: `**Merhaba!** YardÄ±m almak ister misin?\nAÅŸaÄŸÄ±da bulunan menÃ¼den yardÄ±m almak istediÄŸiniz kategoriyi seÃ§in. ${interaction.guild.emojiGÃ¶ster(emojis.konfeti)}`, components: [row], ephemeral: true}).catch((e) => {})  
}
if(interaction.customId === "ayliks") {   
const db = await setup.findOne({guildID: settings.guildID, userID: member.id})
if(!db) new setup({guildID: settings.guildID, userID: member.id, levelSystem: true, monthlySystem: true}).save();
if(db) {
if(db.monthlySystem == false) await setup.updateOne({guildID: settings.guildID, userID: member.id}, {$set: { monthlySystem: true } }, { upsert: true }), interaction.reply({content: 'BaÅŸarÄ±yla AylÄ±k Rol Sistemi Aktif Hale Getirildi.', ephemeral: true}).catch((e) => {})  
if(db.monthlySystem == true) await setup.updateOne({guildID: settings.guildID, userID: member.id}, {$set: { monthlySystem: false } }, { upsert: true }), interaction.reply({content: 'BaÅŸarÄ±yla AylÄ±k Rol Sistemi Deaktif Hale Getirildi.', ephemeral: true}).catch((e) => {})   
}
}
if(interaction.customId === "levels") {   
const db = await setup.findOne({guildID: settings.guildID, userID: member.id})
if(!db) new setup({guildID: settings.guildID, userID: member.id, levelSystem: true, monthlySystem: true}).save();
if(db) {
if(db.levelSystem == false) await setup.updateOne({guildID: settings.guildID, userID: member.id}, {$set: { levelSystem: true } }, { upsert: true }), interaction.reply({content: 'BaÅŸarÄ±yla Level Rol Sistemi Aktif Hale Getirildi.', ephemeral: true}).catch((e) => {})  
if(db.levelSystem == true) await setup.updateOne({guildID: settings.guildID, userID: member.id}, {$set: { levelSystem: false } }, { upsert: true }), interaction.reply({content: 'BaÅŸarÄ±yla Level Rol Sistemi Deaktif Hale Getirildi.', ephemeral: true}).catch((e) => {})   
}
}
const modalsss = new Discord.ModalBuilder()
.setCustomId('bisims')
.setTitle('Booster Panel')
const sssssss = new Discord.TextInputBuilder()
.setCustomId('isim')
.setLabel('Ä°sminiz ?')
.setStyle(Discord.TextInputStyle.Short) 
.setPlaceholder('Buraya Ä°sminizi YazÄ±nÄ±z!');
const sxxxxxxxx = new Discord.ActionRowBuilder().addComponents(sssssss);
modalsss.addComponents(sxxxxxxxx);
if(interaction.isButton()) {
if(interaction.customId === "boosters") {    
if(!interaction.member.roles.cache.has(ayar.boosterRoles)) return interaction.reply({content: `<@&${ayar.boosterRoles}> Booster OlmadÄ±ÄŸÄ±n Ä°Ã§in Bu Sistemi KullanamazsÄ±n.`, ephemeral: true}).catch(() => {});
if (zaman.get(member.id) >= 1) return interaction.reply({content: "<@"+member+"> Bu komutu 15 dakika'da bir kullanabilirsin.", ephemeral: true}).catch(() => {});
interaction.showModal(modalsss, {
client: client, 
interaction: interaction, 
})
}
}
if(interaction.customId === "bisims") { 
const bilgisi = interaction.fields.getTextInputValue('isim');   
const engel = ["!", "'", "?", "$", "#", "%", ",", "."];  
if(engel.some(char => bilgisi.toLowerCase().includes(char))) return interaction.reply({content: 'Ä°smine Ã–zel Karakter KoyamazsÄ±n.', ephemeral: true}).catch(() => {});
if(bilgisi.length >= 18) return interaction.reply({content: 'Ä°smin 18 Karakterden Uzun Olamaz.', ephemeral: true}).catch(() => {});
await member.setNickname(`${member.user.globalName && member.user.globalName.includes(ayar.nameTag) ? ayar.nameTag : (ayar.defaultTag ? ayar.defaultTag : (ayar.nameTag || ""))} ${bilgisi}`).catch(() => {});
await interaction.reply({content: `BaÅŸarÄ±yla Ä°smin **${bilgisi}** Olarak DeÄŸiÅŸtirildi.`, ephemeral: true }).catch(() => {});
zaman.set(member.id, (zaman.get(member.id) || 1));
setTimeout(() => {
zaman.delete(member.id)
}, 1000 * 60 * 15 * 1)
}
if(interaction.customId === "levelss") { 
const mesaj = await interaction.reply({content: 'Veri YÃ¼kleniyor...', ephemeral: true})
const [mesajData, sesData] = await Promise.all([
messageUser.findOne({ guildID: settings.guildID, userID: member.id }),
voiceUser.findOne({ guildID: settings.guildID, userID: member.id })
]);
let [mbilgi, sbilgi] = await Promise.all([
mcontrol(mesajData),
scontrol(sesData)
]);
mesaj.edit({ content: `${mbilgi}\n\n${sbilgi}`, ephemeral: true }).catch(() => {});
}
if(interaction.customId === "aylikss") { 
const mesaj = await interaction.reply({content: 'Veri YÃ¼kleniyor...', ephemeral: true})
let bilgi = await monthlycontrol(member)
mesaj.edit({ content: `${bilgi}`, ephemeral: true }).catch(() => {});
}
if (interaction.customId === "serversetups") {
if(interaction.values[0] == 'wembed') {
if(ayar.welcomeMessageEmbed == false) {
await setups.updateOne({guildID: settings.guildID}, {$set: { welcomeMessageEmbed: true } }, {upsert: true})
await interaction.deferReply({ ephemeral: true }).catch(e => {})
interaction.reply({content: 'BaÅŸarÄ±yla HoÅŸgeldin MesajÄ± Embed Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
} else if(ayar.welcomeMessageEmbed == true) {
await setups.updateOne({guildID: settings.guildID}, {$set: { welcomeMessageEmbed: false } }, {upsert: true}) 
await interaction.deferReply({ ephemeral: true }).catch(e => {})
interaction.reply({content: 'BaÅŸarÄ±yla HoÅŸgeldin MesajÄ± Normal Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
}
}
if(interaction.values[0] == 'tagsystem') {
if(ayar.tagSystem == false) {
await setups.updateOne({guildID: settings.guildID}, {$set: { tagSystem: true } }, {upsert: true})
interaction.reply({content: 'BaÅŸarÄ±yla Tag Sistemi Aktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
} else if(ayar.tagSystem == true) {
await setups.updateOne({guildID: settings.guildID}, {$set: { tagSystem: false } }, {upsert: true}) 
interaction.reply({content: 'BaÅŸarÄ±yla Tag Sistemi Deaktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
}
}
if(interaction.values[0] == 'ageSystem') {
if(ayar.ageSystem == false) {
await setups.updateOne({guildID: settings.guildID}, {$set: { ageSystem: true } }, {upsert: true})
interaction.reply({content: 'BaÅŸarÄ±yla YaÅŸ Sistemi Aktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
} else if(ayar.ageSystem == true) {
await setups.updateOne({guildID: settings.guildID}, {$set: { ageSystem: false } }, {upsert: true}) 
interaction.reply({content: 'BaÅŸarÄ±yla YaÅŸ Sistemi Deaktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
}
}
if(interaction.values[0] == 'autoregister') {
if(ayar.otoRegister == false) {
await setups.updateOne({guildID: settings.guildID}, {$set: { otoRegister: true } }, {upsert: true}) 
interaction.reply({content: 'BaÅŸarÄ±yla Oto KayÄ±t Sistemi Aktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
} else if(ayar.otoRegister == true) {
await setups.updateOne({guildID: settings.guildID}, {$set: { otoRegister: false } }, {upsert: true}) 
interaction.reply({content: 'BaÅŸarÄ±yla Oto KayÄ±t Sistemi Deaktif Olarak AyarlandÄ±.', ephemeral: true}).catch((err) => {})
}
}
if(interaction.values[0] == 'iptal') {
if(interaction) interaction.message.delete().catch((err) => {})
}
}  
if(interaction.isButton()) {
if (interaction.customId === 'detete') return;
let data = await Guild.findOne({ guildId: settings.guildID });
let user_olddata = await User.findOne({ userId: interaction.user.id });
if (!user_olddata) { await User.create({ userId: interaction.user.id }) }
let user_data = await User.findOne({ userId: interaction.user.id });
if (data?.private_voices?.mode === true) {
if (interaction.member?.voice.channel && interaction.channel.id === data?.private_voices?.textId && interaction.channel.id === data.private_voices.textId && interaction.member?.voice.channel.id === user_data?.private_voices?.voiceId && interaction.member.voice.channel.id === user_data.private_voices.voiceId) {
if (interaction.customId === 'rename') {
const Modal = new Discord.ModalBuilder()
.setCustomId('myModal')
.setTitle('Kanal adÄ± deÄŸiÅŸikliÄŸi');
const Input = new Discord.TextInputBuilder()
.setCustomId('Input')
.setPlaceholder('Ã–zel OdaÂ¹')
.setLabel("Yeni bir ad girin")
.setStyle(Discord.TextInputStyle.Short)
.setMinLength(1)
.setMaxLength(24)
let firstActionRow = new Discord.ActionRowBuilder().addComponents(Input);
Modal.addComponents(firstActionRow);
await interaction.showModal(Modal);
}                  
            if (interaction.customId === 'ekleme') {
                const Modal = new Discord.ModalBuilder()
                    .setCustomId('ekleme')
                    .setTitle('KullanÄ±cÄ± Ekleme');
                const Input = new Discord.TextInputBuilder()
                    .setCustomId('InputEkleme')
                    .setPlaceholder('KullanÄ±cÄ± Ä°d')
                    .setLabel("KullanÄ±cÄ± kimliÄŸi girin")
                    .setStyle(Discord.TextInputStyle.Short)
                    .setMinLength(1)
                    .setMaxLength(20)
              let firstActionRow = new Discord.ActionRowBuilder().addComponents(Input);
                Modal.addComponents(firstActionRow);
                await interaction.showModal(Modal);
            }
            if (interaction.customId === 'limit') {
                const Modal = new Discord.ModalBuilder()
                    .setCustomId('limit')
                    .setTitle('KullanÄ±cÄ± sÄ±nÄ±rÄ±nÄ± deÄŸiÅŸtir');
                const Input = new Discord.TextInputBuilder()
                    .setCustomId('InputLimit')
                    .setPlaceholder('0 - 99')
                    .setLabel("Yeni bir kullanÄ±cÄ± sÄ±nÄ±rÄ± girin")
                    .setStyle(Discord.TextInputStyle.Short)

                    .setMinLength(1)

                    .setMaxLength(2)
               let firstActionRow = new Discord.ActionRowBuilder().addComponents(Input);
                Modal.addComponents(firstActionRow);
                await interaction.showModal(Modal);
            }
          if (interaction.customId === 'kick') {
                const Modal = new Discord.ModalBuilder()
                    .setCustomId('kick')
                    .setTitle('KullanÄ±cÄ± sÄ±nÄ±rÄ±nÄ± deÄŸiÅŸtir');
                const Input = new Discord.TextInputBuilder()
                    .setCustomId('InputKick')
                    .setPlaceholder('KullanÄ±cÄ± Ä°d')
                    .setLabel("kullanÄ±cÄ± kimliÄŸini girin")
                    .setStyle(Discord.TextInputStyle.Short)
                    .setMinLength(1)
                    .setMaxLength(20)
              let firstActionRow = new Discord.ActionRowBuilder().addComponents(Input);
                Modal.addComponents(firstActionRow);
                await interaction.showModal(Modal);
            }
            if (interaction.customId === 'cikarma') {
                const Modal = new Discord.ModalBuilder()
                    .setCustomId('cikarma')
                    .setTitle("KullanÄ±cÄ± Ã‡Ä±karma");
                const Input = new Discord.TextInputBuilder()
                    .setCustomId('InputCikarma')
                    .setPlaceholder('KullanÄ±cÄ± Ä°d')
                    .setLabel("kullanÄ±cÄ± kimliÄŸini girin")
                    .setStyle(Discord.TextInputStyle.Short)
                    .setMinLength(1)
                    .setMaxLength(20)
               let firstActionRow = new Discord.ActionRowBuilder().addComponents(Input);
                Modal.addComponents(firstActionRow);
                await interaction.showModal(Modal);
}
} else {
if(interaction.customId == 'kick' && interaction.customId == 'cikarma' && interaction.customId == 'ekleme' && interaction.customId == 'limit' && interaction.customId == 'rename') return;
interaction.reply({ content: `Bu komutu kullanmak iÃ§in Ã¶zel odanÄ±z olmasÄ± gerekir.`, ephemeral: true }).catch(() => {});   
}     
}
}
if (interaction.isModalSubmit()) {
if (interaction.customId === 'myModal') {
const input = interaction.fields.getTextInputValue('Input');
interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`**${input}** Yeni kanal adÄ±`)], ephemeral: true })
await interaction.member.voice.channel.setName(input).catch(() => null)
}
if (interaction.customId === 'ekleme') {
let user_data = await User.findOne({ userId: interaction.user.id });
let input = interaction.fields.getTextInputValue('InputEkleme');
if(isNaN(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`LÃ¼tfen KullanÄ±cÄ± Ä°d Gir.`)], ephemeral: true })                
if(!interaction.guild.members.cache.get(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`BÃ¶yle bir kullanÄ±cÄ± bulunamadÄ±.`)], ephemeral: true })                
interaction.guild.members.fetch(input).then(x => {
if (!x) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`BÃ¶yle bir kullanÄ±cÄ± bulunamadÄ±.`)], ephemeral: true })                
interaction.reply({embeds: [new Discord.EmbedBuilder().setDescription(`${x} KullanÄ±cÄ±sÄ±na Kanala BaÄŸlanma Ä°zni Verildi!`)], ephemeral: true})
interaction.member.voice.channel.permissionOverwrites.edit(x.id, { ViewChannel: true, Connect: true, Speak: true, Stream: true}).catch(() => null)
})
}  
if (interaction.customId === 'limit') {
let input = interaction.fields.getTextInputValue('InputLimit');
if (isNaN(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`GeÃ§ersiz bir numara girdiniz.`)], ephemeral: true })
if((input >= 5) || input == 0) return interaction.reply({embeds: [new Discord.EmbedBuilder().setDescription(`Oda SayÄ±sÄ± 4'den Fazla Olamaz.`)], ephemeral: true})		
interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`**${input}** kullanÄ±cÄ± sÄ±nÄ±rÄ± ayarlandÄ±`)], ephemeral: true })
await interaction.member.voice.channel.setUserLimit(input).catch(() => null)
}
if (interaction.customId === 'cikarma') {
let user_data = await User.findOne({ userId: interaction.user.id });
let input = interaction.fields.getTextInputValue('InputCikarma');
if(isNaN(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`LÃ¼tfen KullanÄ±cÄ± Ä°d Gir.`)], ephemeral: true })                
if(!interaction.guild.members.cache.get(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`BÃ¶yle bir kullanÄ±cÄ± bulunamadÄ±.`)], ephemeral: true })                
interaction.guild.members.fetch(input).then(x => {
if (!x) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`BÃ¶yle bir kullanÄ±cÄ± bulunamadÄ±.`)], ephemeral: true })                
interaction.reply({embeds: [new Discord.EmbedBuilder().setDescription(`${x} KullanÄ±cÄ±sÄ±ndan Kanala BaÄŸlanma Ä°zni AlÄ±ndÄ±!`)], ephemeral: true})
interaction.member.voice.channel.permissionOverwrites.edit(x.id, { ViewChannel: null, Connect: null, Speak: null, Stream: null}).catch(() => null)
})
}
if (interaction.customId === 'kick') {
let user_data = await User.findOne({ userId: interaction.user.id });
let input = interaction.fields.getTextInputValue('InputKick');
if(isNaN(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`LÃ¼tfen KullanÄ±cÄ± Ä°d Gir.`)], ephemeral: true })                
if(!interaction.guild.members.cache.get(input)) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`BÃ¶yle bir kullanÄ±cÄ± bulunamadÄ±.`)], ephemeral: true })                
interaction.guild.members.fetch(input).then(x => {
if (!x.voice.channel) return interaction.reply({embeds: [new Discord.EmbedBuilder().setDescription(`${x} KullanÄ±cÄ±sÄ± Bir Ses KanalÄ±nda Bulunmuyor!`)], ephemeral: true});
if (x.voice.channel.id !== user_data.private_voices.voiceId) return interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`Belirtilen katÄ±lÄ±mcÄ± sizin ses kanalÄ±nda deÄŸil.`)], ephemeral: true })
interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`**${x.user}** ses kanalÄ±ndan atÄ±ldÄ±.`)], ephemeral: true })
x.voice.disconnect().catch(e => {})
}, y => {
interaction.reply({ embeds: [new Discord.EmbedBuilder().setDescription(`GeÃ§ersiz bir kimlik girdiniz.`)], ephemeral: true })
})
await interaction.member.voice.channel.setUserLimit(input).catch(() => null)
}
}
let Database = await Menu.find({})
if(Database && Database.length >= 1) {
for (let index = 0; index < Database.length; index++) {
let menu = interaction.customId
let Data = Database[index]
if(Data.Secret == menu) {
let customMap = new Map()
Data.Roller.forEach(r => customMap.set(r, r))
let roles = Data.Roller
var role = []
for (let index = 0; index < interaction.values.length; index++) {
let ids = interaction.values[index]
let den = customMap.get(ids)
role.push(den)
}
if (interaction.values[0] === "rolsil") {
await member.roles.remove(roles).catch((e) => {})
} else {
if (!interaction.values.length) {
await member.roles.remove(roles).catch(err => {})
} else {
await member.roles.remove(roles).catch(err => {})
await member.roles.add(role).catch(err => {})
}
}
interaction.reply({ content: "Rolleriniz gÃ¼ncellendi.", ephemeral: true }).catch((e) => {})
}
}
}
if (interaction.customId === "suphekontrol") {
if(!ayar.fakeAccRoles.some(x => interaction.member.roles.cache.has(x))) return interaction.reply({content: `Zaten KayÄ±tlÄ±sÄ±n Sunucuda.`, ephemeral: true})
if (Date.now() - interaction.user.createdTimestamp < ms("7d")) {
const embed = new Discord.EmbedBuilder().setDescription(`*HesabÄ±nÄ±n kuruluÅŸ tarihi: <t:${Math.floor(interaction.member.user.createdTimestamp / 1000)}>\n\nHesabÄ±n: <t:${Math.floor(interaction.member.user.createdTimestamp / 1000)}:R> kurulmuÅŸ\n\nHesabÄ±nÄ±n kuruluÅŸ tarihi 7 gÃ¼nÃ¼ geÃ§mediÄŸi iÃ§in seni ÅŸÃ¼pheliden Ã§Ä±kartamadÄ±m. Daha sonra tekrar kontrol edebilirsin.*`)
.setColor("Red");
interaction.reply({ embeds: [embed], ephemeral: true });
} else {
await interaction.member.roles.set(ayar.unregRoles).catch(e => {})
const embed = new Discord.EmbedBuilder().setColor("Green").setDescription(`*HesabÄ±nÄ±n kuruluÅŸ tarihi: <t:${Math.floor(interaction.member.user.createdTimestamp / 1000)}>\n\nHesabÄ±n: <t:${Math.floor(interaction.member.user.createdTimestamp / 1000)}:R> kurulmuÅŸ\n\nHesabÄ±nÄ±n kuruluÅŸ tarihi 7 gÃ¼nÃ¼ geÃ§tiÄŸi iÃ§in seni ÅŸÃ¼pheliden Ã§Ä±karttÄ±m. Teyit kanallarÄ±mÄ±za girip kayÄ±t olabilirsin.*`);
interaction.reply({ embeds: [embed], ephemeral: true });
}
}
}; 
module.exports.conf = {
name: "interactionCreate",
};

async function mcontrol(veri){
const ayar = await setups.findOne({guildID: settings.guildID})
const guild = client.guilds.cache.get(settings.guildID)
if(!ayar) return;
const chatRoles = [
{limit: 2500, role: 'chatBronzeRoles'},
{limit: 5000, role: 'chatSilverRoles'},
{limit: 10000, role: 'chatGoldRoles'},
{limit: 20000, role: 'chatDiamondRoles'},
{limit: 40000, role: 'chatEmeraldRoles'}
];
let nextRank = '';
let remainingMessages = 0;
if (veri) {
for (let i = 0; i < chatRoles.length; i++) {
if (veri.topStat < chatRoles[i].limit) {
nextRank = ayar[chatRoles[i].role];
remainingMessages = chatRoles[i].limit - veri.topStat;
break;
}
}
if (nextRank !== '') {
return `**${guild.roles.cache.get(nextRank).name}** RolÃ¼ne UlaÅŸmak Ä°Ã§in **${remainingMessages}** Mesaj Daha Atman Gerekli`;
} else {
return `**${guild.roles.cache.get(ayar.chatEmeraldRoles).name}** RolÃ¼ne UlaÅŸtÄ±n!`;
}
} else {
return 'Veri AlÄ±namadÄ±.';
}
}
async function scontrol(veri) {
const ayar = await setups.findOne({guildID: settings.guildID})
const guild = client.guilds.cache.get(settings.guildID)
if(!ayar) return;
const voiceRoles = [
{limit: 360000000, role: 'voiceBronzeRoles'},
{limit: 1080000000, role: 'voiceSilverRoles'},
{limit: 2700000000, role: 'voiceGoldRoles'},
{limit: 7200000000, role: 'voiceDiamondRoles'},
{limit: 14400000000, role: 'voiceEmeraldRoles'}
];
let nextRank = '';
let remainingVoice = 0;
if(veri) {
for (let i = 0; i < voiceRoles.length; i++) {
if (veri.topStat < voiceRoles[i].limit) {
nextRank = ayar[voiceRoles[i].role];
remainingVoice = voiceRoles[i].limit - veri.topStat;
break;
}
}
if (nextRank !== '') {
return `**${guild.roles.cache.get(nextRank).name}** RolÃ¼ne UlaÅŸmak Ä°Ã§in **${moment.duration(remainingVoice).format("D [GÃ¼n], H [Saat], m [Dakika]")}** Daha Seslerde Vakit GeÃ§irmen Gerekli`;
} else {
return `**${guild.roles.cache.get(ayar.voiceEmeraldRoles).name}** RolÃ¼ne UlaÅŸtÄ±n!`;
}
} else {
return 'Veri AlÄ±namadÄ±.';
}
}

async function monthlycontrol(member) {
const ayar = await setups.findOne({ guildID: settings.guildID });
const guild = client.guilds.cache.get(settings.guildID);
if (!ayar) return;
const monthRoles = [
{limit: 30, role: 'oneMonthRoles'},
{limit: 90, role: 'threeMonthRoles'},
{limit: 180, role: 'sixMonthRoles'},
{limit: 270, role: 'nineMonthRoles'},
{limit: 365, role: 'oneYearRoles'}
];
const joinDate = new Date(member.joinedAt); 
let nextRank = '';
let kalanZaman = 0;
if (joinDate) {
const kalanGÃ¼n = Math.floor((Date.now() - joinDate.getTime()) / (1000 * 60 * 60 * 24)); 
for (let i = 0; i < monthRoles.length; i++) {
if (kalanGÃ¼n < monthRoles[i].limit) {
nextRank = ayar[monthRoles[i].role];
kalanZaman = monthRoles[i].limit - kalanGÃ¼n;
break;
}
}
if (nextRank !== '') {
return `**${guild.roles.cache.get(nextRank).name}** RolÃ¼ne UlaÅŸmak Ä°Ã§in **${kalanZaman}** GÃ¼n Daha Sunucuda Bulunman Gerekli`;
} else {
return;
}
} else {
return 'Veri AlÄ±namadÄ±.';
}
}